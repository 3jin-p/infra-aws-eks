apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "10"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"deployment.kubernetes.io/revision":"2"},"creationTimestamp":"2020-12-22T07:11:31Z","generation":3,"labels":{"app":"testdeployment","namespace":"kubetest"},"name":"testdeployment","namespace":"kubetest","resourceVersion":"41372","selfLink":"/apis/apps/v1/namespaces/kubetest/deployments/testdeployment","uid":"b3f12431-e340-4add-8d30-b6ed7f9f13da"},"spec":{"progressDeadlineSeconds":500,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"testdeployment","namespace":"kubetest"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"testdeployment","namespace":"kubetest"}},"spec":{"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"beta.kubernetes.io/arch","operator":"In","values":["amd64","arm64"]}]}]}}},"containers":[{"image":"894538594166.dkr.ecr.ap-northeast-2.amazonaws.com/test-repo","imagePullPolicy":"Always","name":"test-repo","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}},"status":{"conditions":[{"lastTransitionTime":"2020-12-22T07:11:31Z","lastUpdateTime":"2020-12-22T07:11:31Z","message":"Deployment does not have minimum availability.","reason":"MinimumReplicasUnavailable","status":"False","type":"Available"},{"lastTransitionTime":"2020-12-22T07:51:40Z","lastUpdateTime":"2020-12-22T07:51:40Z","message":"ReplicaSet \"testdeployment-6668b6fbd5\" has timed out progressing.","reason":"ProgressDeadlineExceeded","status":"False","type":"Progressing"}],"observedGeneration":3,"replicas":2,"unavailableReplicas":2,"updatedReplicas":1}}
  creationTimestamp: "2020-12-22T08:03:47Z"
  generation: 10
  labels:
    app: testdeployment
    namespace: kubetest
  name: testdeployment
  namespace: kubetest
  resourceVersion: "5157866"
  selfLink: /apis/apps/v1/namespaces/kubetest/deployments/testdeployment
  uid: f9270147-9c4f-4a31-851c-8d70c46d96e6
spec:
  progressDeadlineSeconds: 500
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: testdeployment
      namespace: kubetest
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: testdeployment
        namespace: kubetest
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      containers:
      - image: 894538594166.dkr.ecr.ap-northeast-2.amazonaws.com/test-repo
        imagePullPolicy: Always
        name: test-repo
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /app/log
          name: log-volume
      - env:
        - name: FLUENT_ARGS
          value: -c /etc/td-agent/td-agent.conf --use-v1-config
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY
              name: aws-account-secret
        - name: AWS_ACCESS_SECRET
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_SECRET
              name: aws-account-secret
        - name: AWS_ACCOUNT
          valueFrom:
            secretKeyRef:
              key: AWS_ACCOUNT
              name: aws-account-secret
        image: 894538594166.dkr.ecr.ap-northeast-2.amazonaws.com/fluentd
        imagePullPolicy: Always
        name: fluentd-sidecar
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /app/log
          name: log-volume
        - mountPath: /etc/td-agent
          name: config-volume
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: log-volume
      - configMap:
          defaultMode: 420
          name: fluentd-config
        name: config-volume

